[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "rtemislive",
    "section": "",
    "text": "Welcome\n\n\n\nWelcome to the rtemislive online documentation.\n \nrtemislive is the graphical interface for rtemis. It is a comprehensive data science web application that provides:\n\nAdvanced visualization\nStatistical Analyses\nMachine Learning, including Clustering, Decomposition, Regression, and Classification\n\n  \n\n \n\n\n\n \n\n\n\n▄▄▄  ▄▄▄▄▄▄▄▄ .• ▌ ▄ ·. ▪  .▄▄ ·\n▀▄ █·•██  ▀▄.▀··██ ▐███▪██ ▐█ ▀.\n▐▀▀▄  ▐█.▪▐▀▀▪▄▐█ ▌▐▌▐█·▐█·▄▀▀▀█▄\n▐█•█▌ ▐█▌·▐█▄▄▌██ ██▌▐█▌▐█▌▐█▄▪▐█\n.▀  ▀ ▀▀▀  ▀▀▀ ▀▀  █▪▀▀▀▀▀▀ ▀▀▀▀"
  },
  {
    "objectID": "Introduction.html#rtemis",
    "href": "Introduction.html#rtemis",
    "title": "1  Introduction",
    "section": "1.1 rtemis",
    "text": "1.1 rtemis\n\n\n\nrtemis provides a comprehensive console and web-based machine learning and visuzalization platform.\n\nrtemis: R package that provides:\n\nStatic and interactive visualization\nSupervised learning: classification & regression\nUnsupervised learning:\n\nClustering\nDecomposition\n\nCross-decomposition\n\nrtemislive: web application providing no-code access to rtemis functionality\n\nFor more information on the rtemis package see the online documentation and GitHub repository."
  },
  {
    "objectID": "Introduction.html#rtemislive",
    "href": "Introduction.html#rtemislive",
    "title": "1  Introduction",
    "section": "1.2 rtemislive",
    "text": "1.2 rtemislive\n\n\n\n\n\nFigure 1.1: The first drop-down menu is the Module selector\n\n\n\n\nrtemislive is organized in modules. The user can toggle modules ON and OFF using the first drop-down menu on the top right.  Custom installations allow you to pre-load a dataset and defining the initial state of most application settings, including modules and themes.  The documentation on this site ir organized by module: each chapter, accessible from the navigation in the lest, corresponds to an individual module.  Data operations, including filtering, selecting and a subset of data aggregation operations, performed in real time using data.table.  rtemis and rtemislive are written by Stathis Gennatas, MBBS PhD"
  },
  {
    "objectID": "Data.html#uploading-data",
    "href": "Data.html#uploading-data",
    "title": "2  Data",
    "section": "2.1 Uploading data",
    "text": "2.1 Uploading data\n\n\n\n\n\nFigure 2.2: rtemislive supports most popular tabular data file formats\n\n\n\n\nrtemislive supports a wide range of file types, including some of the most popular tabular data formats:\n\nGeneral purpose: .csv, .json\nR: .rds\nExcel: .xlsx\nApache Arrow: .arrow, .feather, .parquet\nStata: .dta\nSPSS: .por, .sav, .zsav\nSAS: .xpt\nMatlab: .mat\n\nIt is best to upload cleaned data.  Clean data includes:\n\nDescriptive column names that always begin with letters (not numbers!) and contain no symbols other than underscores\nDescriptive categorical levels: e.g. “Female”, “Male”, not “1”, “2”; “Control”, “Case”, not “0”, “1”)\n\nIf you have prepared a dataset in R, the most convenient way to upload to rtemislive is to use saveRD() to save to an RDS and then upload that file. This will maintain all column classes."
  },
  {
    "objectID": "Data.html#view-loaded-data",
    "href": "Data.html#view-loaded-data",
    "title": "2  Data",
    "section": "2.2 View loaded data",
    "text": "2.2 View loaded data\nBy default, rtemislive will display the first 10 rows and the first 9 columns of data. This is to avoid slow loading of large datasets.\nUse the menu on the right to:\n\nSelect which columns to show\nChoose whether to paginate the table\nDefine number of rows to load\n\nThe data view allows you to:\n\nSort by any column in asceding or descending order\nSearch the contents of the table\n\n\n\n\n\n\nFigure 2.3: The Data tab provides a spreadsheet-like view of your data, which can be sorted and searched"
  },
  {
    "objectID": "Preproc.html",
    "href": "Preproc.html",
    "title": "3  Preproc",
    "section": "",
    "text": "Figure 3.1: The Preproc module checks and preprocesses data\n\n\n\n\nThe Preproc module provides:\n\nSummary of your data: this is the output of the rtemis check_data() function\nExtensive options for data preprocessing: preprocessing is performed using the rtemis preprocess() command.  Hover over any preprocess option on the right menu to display a tooltip with the corresponding description.\n\nThe following operations are available:\n\nData Cleaning\n\nRemove constants\nRemove duplicates\n\nBatch Type Conversions, i.e. convert all columns of a type to another type\n\nCharacter to factor\nLogical to factor\nInteger to numeric\n\nConvert all variables with up to a particular number of unique values to factor This can be very useful on a dataset that has not been cleaned yet. For example, if sex is recorded as 1,2 and race is recorded with integers 1-6, setting this to 6 will convert both to factors.\nIndividual variable conversion\n\nSelect a variable by name and convert to any type\n\nHandle missing data:\n\nFactor NA to missing: Considering all factor variables, convert missing values to a new level named “missing”. This is one way to impute categorical data\nImpute missing data: Uses iterative random forest with predictive mean matching to predict missing data from available data\n\nAdd missingness: Add an indicator column for each variable that is being imputed indicating cases whose data was imputed\n\nComplete cases: keep complete cases only\n\nData Transformations\n\nScale numeric data: Transformed all numeric columns to have a standard deviation of 1\nCenter numeric data: Transformed all numeric columns to have a mean of 0\nOne-hot encode categorical: One-hot all categorical variables\n\nReorder factor levels: Allows you to pick any factor in the dataset and explicitly set the order of levels. This affects the order categorical levels appear in plots, and which level is considered as the baseline in linear models.\nDelete columns: Allows removing columns from your data"
  },
  {
    "objectID": "Describe.html",
    "href": "Describe.html",
    "title": "4  Describe",
    "section": "",
    "text": "Figure 4.1: The Cluster module allows clustering of cases\n\n\n\n\nThe Describe module allows you to select any number of variables of any class and provides a summary output grouped by type:\n\nNumeric: includes all numeric variables (incl. integer)\n\nMin\nMax\nMedian\nMean\nSD\n\nCategorical: includes all factors and character variables\n\nN unique\nMode\nCounts\nPct missing\n\nDate: includes all date variables\n\nMin\nMax\nMedian\nMean\nPct missing"
  },
  {
    "objectID": "Plot.html#exporting-plots",
    "href": "Plot.html#exporting-plots",
    "title": "5  Plot",
    "section": "5.1 Exporting plots",
    "text": "5.1 Exporting plots\nTo export a plot:\n\nUse the plotting drop-down menu (second of the top-right menus) to switch on “Modebar”\nSet the theme, palette, output format, output height, and output width\nHover over plot and click the camera icon “Download plot”\n\nFor example, for journal publications you may want to be in light mode using the top-right switch and select the “Grid” theme from the Plot drop-down:\n\n\n\n\n\nFigure 5.2: The Plot options drop-down allows setting plot export options"
  },
  {
    "objectID": "Heat.html",
    "href": "Heat.html",
    "title": "6  Heatmap",
    "section": "",
    "text": "Figure 6.1: The Heat tab allows plotting heatmaps of correlation matrices\n\n\n\n\nThe heatmap module allows plotting heatmaps of the correlation matrix of any number of continuous variables."
  },
  {
    "objectID": "Graph.html",
    "href": "Graph.html",
    "title": "7  Graph",
    "section": "",
    "text": "Figure 7.1: The Graph module allows plotting of networks\n\n\n\n\nGraph theory module allows plotting networks constructed from the correlation matrix of continuous variables. It supports multiple graph layout and clustering algorithms, and features three visualization engines:\n\nigraph\nNetworkD3\ngraphjs"
  },
  {
    "objectID": "Cluster.html",
    "href": "Cluster.html",
    "title": "8  Cluster",
    "section": "",
    "text": "Figure 8.1: The Cluster module allows clustering of cases\n\n\n\n\nThe Cluster module allows clustering of cases. The following algorithms are included:\n\nKMEANS K-Means Clustering\nCMEANS Fuzzy C-Means Clustering\nPAM Patitioning Around Medoids (K-Medoids)\nPAMK Patitioning Around Medoids with k estimation\nSPEC Spectral Clustering\nNGAS Neural Gas Clustering\nMEANSHIFT Meanshift Clustering\nHOPACH Hierarchical Ordered Partitioning and Collapsing Hybrid\nEMC Expectation Maximization Clustering\nDBSCAN Density-Based Spatial Clustering of Applications with Noise\nHARDCL Hard Competitive Learning"
  },
  {
    "objectID": "Decom.html",
    "href": "Decom.html",
    "title": "9  Decom",
    "section": "",
    "text": "Figure 9.1: The Decom module allows decomposition / matrix factorization of continuous variables\n\n\n\n\nThe decomposition module provide algorithms for linear and nonlinear decomposition / matrix factorization.\nThe following algorithms are supported:\n\nPCA Principal Component Analysis\nICA Independent Component Analysis\nNMF Non-negative Matrix Factorization\nSPCA Sparse PCA\nKernel PCA Kernel Principal Component Analysis\nISOMAP\nMDS Multidimensional scaling\nLLE Locally Linear Embedding\ntSNE t-distributed Stochastic Neighbor Embedding\nUMAP Uniform Manifold Approximation and Projection\n\nAlgorithm-specific hyperparameters will be show below the algorithm selection box when applicable."
  },
  {
    "objectID": "massGLM.html",
    "href": "massGLM.html",
    "title": "10  massGLM",
    "section": "",
    "text": "Figure 10.1: massGLM Volcano plot\n\n\n\n\n\n\n\n\n\nFigure 10.2: massGLM Manhattan plot\n\n\n\n\nThe massGLM module allows you to fit any number of linear models and visualize coefficients and p-values.\nUse the right menu to select outcomes, a main predictor of interest, and, optionally, more covariates.\n\nOutcomes: These should be continuous variables. One linear model will be fit for each. For example, these could measures of individual brain regions (e.g. gray matter volume or density), clinical or neuropsychological scores, etc.\nPredictor: This can be either continuous or categorical. It is the main predictor whose effect you want to test on each of the outcomes. For example, this could be diagnosis, or a continuous measure of performance (e.g. CDR sum-of-boxes)\nCovariates: Optional set of predictors, continuous and categorical. These are sometimes refered to as covariates of no interest, however, their coefficients and p-values can be explored the same way as for the Predictor\n\nmassGLM fits models of the following type: \\[ y_i \\sim Predictor + Covariates \\]\nfor each \\(y_i\\) in “Outcomes”"
  },
  {
    "objectID": "Predict.html",
    "href": "Predict.html",
    "title": "11  Predict",
    "section": "",
    "text": "Figure 11.1: The Predict module makes advanced machine learning available in a few clicks\n\n\n\n\nThe Predict module allows training of regression and classification models using:\n\nGLMNET Elastic Net Regularization\nSVM Support Vector Machine\nCART Classification and Regression Trees\nRF Random Forest\nGBM Gradient Boosting\nXGBoost (a gradient boosting implementation)"
  },
  {
    "objectID": "MRview.html",
    "href": "MRview.html",
    "title": "12  MRview",
    "section": "",
    "text": "Figure 12.1: MRI Viewer\n\n\n\n\nThe MRview module allows you to load a main MRI volume and one or more overlays."
  },
  {
    "objectID": "Protein.html",
    "href": "Protein.html",
    "title": "13  Protein",
    "section": "",
    "text": "Figure 13.1: The Protein module visualizes the primary structure of proteins\n\n\n\n\nThe Protein module allows visualizing the primary structure, i.e. amino acid sequence, of proteins.\nIt allows multiple types of annotations:\n\nSite annotations\nDisease variants\nRegion annotations\nPost-translational modifications"
  },
  {
    "objectID": "PDB.html",
    "href": "PDB.html",
    "title": "14  PDB",
    "section": "",
    "text": "Figure 14.1: The PDB module provides 3D visualization of protein structures\n\n\n\n\nThe PDB module allows visualization of protein structures featured in the Protein Data Bank (PDB)."
  },
  {
    "objectID": "Predict.html#resampling",
    "href": "Predict.html#resampling",
    "title": "11  Predict",
    "section": "11.1 Resampling",
    "text": "11.1 Resampling\nThe “Outer Resampling” settings control the training-test splits. These control the arguments passed to the rtemis resample() function.\n\nResampling method\n\nStratified subsampling\nStratified bootstrap\nK-fold\nBootstrap\nLeave-one-out\n\nSeed: for reproducibility, if you set a seed here, all train-test resamples will be the same between runs, e.g. this allows direct comparison of models trained with different algorithms"
  },
  {
    "objectID": "Predict.html#algorithm",
    "href": "Predict.html#algorithm",
    "title": "11  Predict",
    "section": "11.2 Algorithm",
    "text": "11.2 Algorithm\nAvailable algorithms:\n\nGLMNET Elastic Net Regularization\nSVM Support Vector Machine\nCART Classification and Regression Trees\nRF Random Forest\nGBM Gradient Boosting\nXGBoost (a gradient boosting implementation)\n\nAlgorithm-specific options appear once an Algorithm has been selected. Tooltips explain each hyperparameter."
  },
  {
    "objectID": "Predict.html#hyperparameter-tuning",
    "href": "Predict.html#hyperparameter-tuning",
    "title": "11  Predict",
    "section": "11.3 Hyperparameter tuning",
    "text": "11.3 Hyperparameter tuning\nThe Predict module uses the rtemis elevate() function to perform automatic nested resampling, which means:\n\nSplitting full sample into multiple training & testing subsets\nSplitting each training sample into training & validation subsets to perform hyperparameter tuning (model selection)\n\nA musical note in front of an input box means the hyperparameter is tunable. Automatic hyperparameter tuning will be performed if more than one value is entered.  For example, if you have selected Gradient Boosting as the learning algorithm, you can input “2, 3” in “Max depth”. Internal 5-fold cross-validation of each training set will be performed, the best overall performing combination of hyperparameters will be chosen, and a model will be retrained on the full training set using the best hyperparameter combination."
  }
]